package com.onified.distribute.controller;

import com.onified.distribute.dto.*;
import com.onified.distribute.dto.ReplenishmentQueueDTO;
import com.onified.distribute.repository.ConsumptionProfileRepository;
import com.onified.distribute.repository.LeadTimeRepository;
import com.onified.distribute.repository.ProductRepository;
import com.onified.distribute.service.ReplenishmentOverrideLogService;
import com.onified.distribute.service.ReplenishmentQueueService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;

import java.util.*;
import java.util.HashMap;
import java.util.Map;

@Slf4j
@RestController
@RequestMapping("/api/v1/replenishment-queue")
@RequiredArgsConstructor
public class ReplenishmentQueueController {

    private final ReplenishmentQueueService replenishmentQueueService;
    private final ReplenishmentOverrideLogService overrideLogService;
    private final ConsumptionProfileRepository consumptionProfileRepository;
    private final LeadTimeRepository leadTimeRepository;
    private final ProductRepository productRepository;


    @GetMapping("/enhanced")
    public ResponseEntity<Page<ReplenishmentQueueResponseDTO>> getAllReplenishmentQueuesEnhanced(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(defaultValue = "priorityScore") String sortBy,
            @RequestParam(defaultValue = "desc") String sortDir) {

        log.info("Fetching all replenishment queues with enhanced format - page: {}, size: {}, sortBy: {}, sortDir: {}",
                page, size, sortBy, sortDir);

        Sort sort = sortDir.equalsIgnoreCase("desc") ?
                Sort.by(sortBy).descending() :
                Sort.by(sortBy).ascending();

        Pageable pageable = PageRequest.of(page, size, sort);
        Page<ReplenishmentQueueResponseDTO> queues = replenishmentQueueService.getAllReplenishmentQueuesEnhanced(pageable);

        return ResponseEntity.ok(queues);
    }

    @GetMapping("/filtered")
    public ResponseEntity<Page<ReplenishmentQueueResponseDTO>> getReplenishmentQueuesWithFilters(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(defaultValue = "priorityScore") String sortBy,
            @RequestParam(defaultValue = "desc") String sortDir,
            @RequestParam(required = false) String productId,
            @RequestParam(required = false) String locationId,
            @RequestParam(required = false) String bufferZone,
            @RequestParam(required = false) String status,
            @RequestParam(required = false) Integer minBufferGap,
            @RequestParam(required = false) Integer maxBufferGap,
            @RequestParam(required = false) Double minDaysOfSupply,
            @RequestParam(required = false) Double maxDaysOfSupply,
            @RequestParam(required = false) String recommendedAction,
            @RequestParam(required = false) Double minPriorityScore,
            @RequestParam(required = false) Double maxPriorityScore) {

        log.info("Fetching replenishment queues with filters - productId: {}, locationId: {}, bufferZone: {}, status: {}",
                productId, locationId, bufferZone, status);

        // Create filter object
        ReplenishmentQueueFilterDTO filters = new ReplenishmentQueueFilterDTO();
        filters.setProductId(productId);
        filters.setLocationId(locationId);
        filters.setBufferZone(bufferZone);
        filters.setStatus(status);
        filters.setMinBufferGap(minBufferGap);
        filters.setMaxBufferGap(maxBufferGap);
        filters.setMinDaysOfSupply(minDaysOfSupply);
        filters.setMaxDaysOfSupply(maxDaysOfSupply);
        filters.setRecommendedAction(recommendedAction);
        filters.setMinPriorityScore(minPriorityScore);
        filters.setMaxPriorityScore(maxPriorityScore);

        // Create sort and pageable
        Sort sort = sortDir.equalsIgnoreCase("desc") ?
                Sort.by(sortBy).descending() :
                Sort.by(sortBy).ascending();

        Pageable pageable = PageRequest.of(page, size, sort);

        Page<ReplenishmentQueueResponseDTO> queues = replenishmentQueueService.getReplenishmentQueuesWithFilters(filters, pageable);

        return ResponseEntity.ok(queues);
    }

    @PostMapping("/filtered")
    public ResponseEntity<Page<ReplenishmentQueueResponseDTO>> getReplenishmentQueuesWithFiltersPost(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(defaultValue = "priorityScore") String sortBy,
            @RequestParam(defaultValue = "desc") String sortDir,
            @RequestBody ReplenishmentQueueFilterDTO filters) {

        log.info("Fetching replenishment queues with POST filters: {}", filters);

        Sort sort = sortDir.equalsIgnoreCase("desc") ?
                Sort.by(sortBy).descending() :
                Sort.by(sortBy).ascending();

        Pageable pageable = PageRequest.of(page, size, sort);

        Page<ReplenishmentQueueResponseDTO> queues = replenishmentQueueService.getReplenishmentQueuesWithFilters(filters, pageable);

        return ResponseEntity.ok(queues);
    }

    @GetMapping("/filters/summary")
    public ResponseEntity<Map<String, Object>> getFiltersSummary() {
        log.info("Fetching filters summary");

        Map<String, Object> summary = new HashMap<>();

        // Get distinct values for filter dropdowns
        List<String> bufferZones = Arrays.asList("RED", "YELLOW", "GREEN");
        List<String> statuses = Arrays.asList("PENDING", "PROCESSED", "CANCELED");
        List<String> recommendedActions = Arrays.asList("ORDER", "EXPEDITE", "MONITOR");

        summary.put("bufferZones", bufferZones);
        summary.put("statuses", statuses);
        summary.put("recommendedActions", recommendedActions);

        return ResponseEntity.ok(summary);
    }

    @GetMapping
    public ResponseEntity<Page<ReplenishmentQueueDTO>> getAllReplenishmentQueues(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(defaultValue = "priorityScore") String sortBy,
            @RequestParam(defaultValue = "desc") String sortDir) {
        log.info("Fetching all replenishment queues - page: {}, size: {}", page, size);
        Sort sort = sortDir.equalsIgnoreCase("desc") ? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();
        Pageable pageable = PageRequest.of(page, size, sort);
        Page<ReplenishmentQueueDTO> queues = replenishmentQueueService.getAllReplenishmentQueues(pageable);
        return ResponseEntity.ok(queues);
    }

    @GetMapping("/overrides")
    public ResponseEntity<Page<ReplenishmentOverrideLogDTO>> getAllOverrideLogs(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(defaultValue = "timestamp") String sortBy,
            @RequestParam(defaultValue = "desc") String sortDir,
            @RequestParam(required = false) String productId,
            @RequestParam(required = false) String locationId) {
        log.info("Fetching override logs - productId: {}, locationId: {}, page: {}, size: {}", productId, locationId, page, size);
        Sort sort = sortDir.equalsIgnoreCase("desc") ? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();
        Pageable pageable = PageRequest.of(page, size, sort);
        Page<ReplenishmentOverrideLogDTO> overrideLogs;
        if (productId != null && locationId != null) {
            overrideLogs = overrideLogService.getOverrideLogsByProductIdAndLocationId(productId, locationId, pageable);
        } else if (productId != null) {
            overrideLogs = overrideLogService.getOverrideLogsByProductId(productId, pageable);
        } else if (locationId != null) {
            overrideLogs = overrideLogService.getOverrideLogsByLocationId(locationId, pageable);
        } else {
            overrideLogs = overrideLogService.getAllOverrideLogs(pageable);
        }
        return ResponseEntity.ok(overrideLogs);
    }

    @PostMapping
    public ResponseEntity<ReplenishmentQueueDTO> createQueueItem(@Valid @RequestBody ReplenishmentQueueDTO queueDTO) {
        log.info("Creating replenishment queue item with ID: {}", queueDTO.getQueueId());
        ReplenishmentQueueDTO createdQueueItem = replenishmentQueueService.createQueueItem(queueDTO);
        return new ResponseEntity<>(createdQueueItem, HttpStatus.CREATED);
    }

    @PutMapping("/{queueId}")
    public ResponseEntity<ReplenishmentQueueDTO> updateQueueItem(
            @PathVariable String queueId,
            @Valid @RequestBody ReplenishmentQueueDTO queueDTO) {
        log.info("Updating replenishment queue item: {}", queueId);
        ReplenishmentQueueDTO updatedQueueItem = replenishmentQueueService.updateQueueItem(queueId, queueDTO);
        return ResponseEntity.ok(updatedQueueItem);
    }

    @GetMapping("/{queueId}")
    public ResponseEntity<ReplenishmentQueueDTO> getQueueItemById(@PathVariable String queueId) {
        log.info("Fetching replenishment queue item: {}", queueId);
        ReplenishmentQueueDTO queueItem = replenishmentQueueService.getQueueItemById(queueId);
        return ResponseEntity.ok(queueItem);
    }

    @GetMapping("/by-status")
    public ResponseEntity<Page<ReplenishmentQueueDTO>> getQueueItemsByStatus(
            @RequestParam String status,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size) {
        log.info("Fetching queue items by status: {}", status);
        Pageable pageable = PageRequest.of(page, size);
        Page<ReplenishmentQueueDTO> queueItems = replenishmentQueueService.getQueueItemsByStatus(status, pageable);
        return ResponseEntity.ok(queueItems);
    }

    @GetMapping("/by-zone-and-status")
    public ResponseEntity<Page<ReplenishmentQueueDTO>> getQueueItemsByBufferZoneAndStatus(
            @RequestParam String bufferZone,
            @RequestParam String status,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size) {
        log.info("Fetching queue items by buffer zone: {} and status: {}", bufferZone, status);
        Pageable pageable = PageRequest.of(page, size);
        Page<ReplenishmentQueueDTO> queueItems = replenishmentQueueService.getQueueItemsByBufferZoneAndStatus(bufferZone, status, pageable);
        return ResponseEntity.ok(queueItems);
    }
    
}
