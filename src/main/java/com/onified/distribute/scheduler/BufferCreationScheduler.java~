package com.onified.distribute.scheduler;

import com.onified.distribute.dto.InventoryBufferDTO;
import com.onified.distribute.dto.ReviewCycleDTO;
import com.onified.distribute.entity.ConsumptionProfile;
import com.onified.distribute.entity.DailyConsumptionLog;
import com.onified.distribute.entity.LeadTime;
import com.onified.distribute.entity.ReviewCycle;
import com.onified.distribute.repository.ConsumptionProfileRepository;
import com.onified.distribute.repository.DailyConsumptionLogRepository;
import com.onified.distribute.repository.LeadTimeRepository;
import com.onified.distribute.repository.ReviewCycleRepository;
import com.onified.distribute.service.InventoryBufferService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Slf4j
@Component
@RequiredArgsConstructor
public class BufferCreationScheduler {

    private final InventoryBufferService inventoryBufferService;
    private final LeadTimeRepository leadTimeRepository;
    private final ConsumptionProfileRepository consumptionProfileRepository;
    private final DailyConsumptionLogRepository dailyConsumptionLogRepository;
    private final ReviewCycleRepository reviewCycleRepository;

    @Scheduled(cron = "0 04 21 * * ?")
    @Transactional
    public void createAutomaticBuffers() {
        log.info("Starting automatic buffer creation process at {}", LocalDateTime.now());

        List<LeadTime> activeLeadTimes = leadTimeRepository.findByIsActiveTrue();

        for (LeadTime leadTime : activeLeadTimes) {
            try {
                String productId = leadTime.getProductId();
                String locationId = leadTime.getLocationId();

                if (inventoryBufferService.existsByProductAndLocation(productId, locationId)) {
                    log.info("Buffer already exists for product: {} and location: {}", productId, locationId);
                    continue;
                }

                ConsumptionProfile consumptionProfile = consumptionProfileRepository
                        .findByProductIdAndLocationId(productId, locationId)
                        .orElse(null);

                if (consumptionProfile == null) {
                    log.warn("No consumption profile found for product: {} and location: {}", productId, locationId);
                    continue;
                }

                // Get yesterday's consumption
                int yesterdaysConsumption = getYesterdaysConsumption(productId, locationId);

                InventoryBufferDTO bufferDto = createBufferDto(leadTime, consumptionProfile, yesterdaysConsumption);
                InventoryBufferDTO createdBuffer = inventoryBufferService.createInventoryBuffer(bufferDto);

                log.info("Successfully created buffer for product: {} at location: {} with yesterday's consumption: {}",
                        productId, locationId, yesterdaysConsumption);

            } catch (Exception e) {
                log.error("Error creating buffer for product: {} and location: {}. Error: {}",
                        leadTime.getProductId(), leadTime.getLocationId(), e.getMessage());
            }
        }

        log.info("Completed automatic buffer creation process at {}", LocalDateTime.now());
    }

    private int getYesterdaysConsumption(String productId, String locationId) {
        LocalDate yesterday = LocalDate.now().minusDays(1);
        LocalDateTime startOfYesterday = yesterday.atStartOfDay();
        LocalDateTime endOfYesterday = yesterday.plusDays(1).atStartOfDay();

        return dailyConsumptionLogRepository
                .findByProductIdAndLocationIdAndConsumptionDateBetween(
                        productId, locationId, startOfYesterday, endOfYesterday)
                .map(DailyConsumptionLog::getQuantityConsumed)
                .orElse(0);
    }

    private InventoryBufferDTO createBufferDto(LeadTime leadTime, ConsumptionProfile consumptionProfile, int yesterdaysConsumption) {
        InventoryBufferDTO bufferDto = new InventoryBufferDTO();
        Optional<ReviewCycle> cycle = reviewCycleRepository.findByCycleId("CYCLE001");

        // Set default values
        bufferDto.setBufferDays(0);
        bufferDto.setBufferUnits(0);
        bufferDto.setGreenThresholdPct(0.0);
        bufferDto.setYellowThresholdPct(0.0);
        bufferDto.setRedThresholdPct(0.0);
        bufferDto.setCurrentInventory(0);
        bufferDto.setInPipelineQty(0);
        bufferDto.setNetAvailableQty(0);
        bufferDto.setBufferConsumedPct(0.0);
        bufferDto.setCurrentZone("GREEN");
        bufferDto.setDbmReviewPeriodDays(0);
        bufferDto.setNextReviewDue(null);
        bufferDto.setConsecutiveZoneDays(0);
        bufferDto.setAdjustmentThresholdDays(0);

        // Set basic properties
        bufferDto.setBufferId(UUID.randomUUID().toString());
        bufferDto.setProductId(leadTime.getProductId());
        bufferDto.setLocationId(leadTime.getLocationId());
        bufferDto.setBufferType("SAFETY");
        bufferDto.setIsActive(true);
        bufferDto.setCreatedAt(LocalDateTime.now());
        bufferDto.setUpdatedAt(LocalDateTime.now());

        // Calculate buffer days (sum of lead time components)
        double totalLeadTimeDays = 0.0;
        if (leadTime.getOrderLeadTime() != null)
            totalLeadTimeDays += leadTime.getOrderLeadTime();
        if (leadTime.getManufacturingTime() != null)
            totalLeadTimeDays += leadTime.getManufacturingTime();
        if (leadTime.getTransportTime() != null)
            totalLeadTimeDays += leadTime.getTransportTime();
        if (leadTime.getBufferLeadTimeDays() != null)
            totalLeadTimeDays += leadTime.getBufferLeadTimeDays();

        bufferDto.setBufferDays((int) Math.ceil(totalLeadTimeDays));

        // Calculate buffer units using consumption profile (using adc30d as reference)
        double dailyConsumption = consumptionProfile.getAdc30d() != null ? consumptionProfile.getAdc30d() : 0.0;
        // Add 20% safety factor
        int bufferUnits = (int) Math.ceil(dailyConsumption * totalLeadTimeDays * 1.2);
        bufferDto.setBufferUnits(bufferUnits);

        // Set threshold percentages
        bufferDto.setGreenThresholdPct(33.0);
        bufferDto.setYellowThresholdPct(33.0);
        bufferDto.setRedThresholdPct(33.0);

        // Calculate current inventory based on buffer units minus yesterday's consumption
        int currentInventory = Math.max(0, bufferUnits - yesterdaysConsumption);

        // Initialize inventory-related fields
        bufferDto.setCurrentInventory(currentInventory);
        bufferDto.setInPipelineQty(0);
        bufferDto.setNetAvailableQty(currentInventory);
        // Calculate buffer consumed percentage
        double bufferConsumedPct = bufferUnits > 0 ? ((double) yesterdaysConsumption / bufferUnits) * 100 : 0.0;
        bufferDto.setBufferConsumedPct(bufferConsumedPct);

        // Determine current zone based on remaining inventory
        String currentZone = determineZone(currentInventory, bufferUnits);
        bufferDto.setCurrentZone(currentZone);

        bufferDto.setReviewCycleId("CYCLE001");

        bufferDto.setDbmReviewPeriodDays(Math.abs(cycle.get().getStartDay() - cycle.get().getEndDay()));
        bufferDto.setNextReviewDue(LocalDateTime.now().plusDays(Math.abs(cycle.get().getStartDay() - cycle.get().getEndDay())));
        bufferDto.setConsecutiveZoneDays(0);
        bufferDto.setAdjustmentThresholdDays(0);

        return bufferDto;
    }

    private String determineZone(int currentInventory, int bufferUnits) {
        if (bufferUnits == 0) return "GREEN";

        double inventoryPct = ((double) currentInventory / bufferUnits) * 100;

        if (inventoryPct >= 66.0) return "GREEN";
        else if (inventoryPct >= 33.0) return "YELLOW";
        else return "RED";
    }
}
