package com.onified.distribute.service.impl.masterdata;

import com.onified.distribute.dto.ProductDTO;
import com.onified.distribute.entity.Product;
import com.onified.distribute.repository.ProductRepository;
import com.onified.distribute.service.masterdata.ProductService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;
import com.onified.distribute.exception.ProductExceptionHandler.*;

@Slf4j
@Service
@RequiredArgsConstructor
@Transactional
public class ProductServiceImpl implements ProductService {

    private final ProductRepository productRepository;

    @Override
    @Transactional(readOnly = true)
    public List<String> getProductIdsByCategory(String category) {
        log.info("Fetching product IDs for category: {}", category);
        return productRepository.findProductIdsByCategory(category)
                .stream()
                .map(Product::getProductId)
                .collect(Collectors.toList());
    }

    @Override
    public ProductDTO createProduct(ProductDTO productDto) {
        log.info("Creating product with Tenant SKU: {}, Supplier SKU: {}",
                 productDto.getTenantSku(), productDto.getSupplierSku());

        // Check for existing SKU codes
        validateUniqueSkuCodes(productDto, null);

        Product product = mapToEntity(productDto);
        product.setCreatedAt(LocalDateTime.now());
        product.setUpdatedAt(LocalDateTime.now());

        if (product.getProductId() == null) {
            product.setProductId("PROD-" + UUID.randomUUID().toString().substring(0, 4).toUpperCase());
        }

        Product savedProduct = productRepository.save(product);
        log.info("Product created successfully with ID: {}", savedProduct.getProductId());

        return mapToDto(savedProduct);
    }

    @Override
    public ProductDTO updateProduct(String productId, ProductDTO productDto) {
        log.info("Updating product: {}", productId);

        Product existingProduct = productRepository.findByProductId(productId)
                .orElseThrow(() -> new ProductNotFoundException("Product not found: " + productId));

        // Validate unique SKU codes for update (excluding current product)
        validateUniqueSkuCodes(productDto, existingProduct);

        updateEntityFromDto(existingProduct, productDto);
        existingProduct.setUpdatedAt(LocalDateTime.now());

        Product savedProduct = productRepository.save(existingProduct);
        log.info("Product updated successfully: {}", productId);

        return mapToDto(savedProduct);
    }

    @Override
    @Transactional(readOnly = true)
    public ProductDTO getProductById(String productId) {
        Product product = productRepository.findByProductId(productId)
                .orElseThrow(() -> new ProductNotFoundException("Product not found: " + productId));
        return mapToDto(product);
    }


    @Override
    @Transactional(readOnly = true)
    public ProductDTO getProductByTenantSku(String tenantSku) {
        Product product = productRepository.findByTenantSku(tenantSku)
                .orElseThrow(() -> new ProductNotFoundException("Product not found with Tenant SKU: " + tenantSku));
        return mapToDto(product);
    }

    @Override
    @Transactional(readOnly = true)
    public ProductDTO getProductBySupplierSku(String supplierSku) {
        Product product = productRepository.findBySupplierSku(supplierSku)
                .orElseThrow(() -> new ProductNotFoundException("Product not found with Supplier SKU: " + supplierSku));
        return mapToDto(product);
    }

    @Override
    @Transactional(readOnly = true)
    public Page<ProductDTO> getAllProducts(Pageable pageable) {
        return productRepository.findAll(pageable).map(this::mapToDto);
    }

    @Override
    @Transactional(readOnly = true)
    public Page<ProductDTO> getActiveProducts(Pageable pageable) {
        return productRepository.findByIsActive(true, pageable).map(this::mapToDto);
    }

    @Override
    @Transactional(readOnly = true)
    public Page<ProductDTO> getProductsByCategory(String category, Pageable pageable) {
        return productRepository.findByCategory(category, pageable).map(this::mapToDto);
    }

    @Override
    @Transactional(readOnly = true)
    public Page<ProductDTO> searchProductsByName(String name, Pageable pageable) {
        return productRepository.findByNameContainingIgnoreCase(name, pageable).map(this::mapToDto);
    }

    @Override
    @Transactional(readOnly = true)
    public List<ProductDTO> getProductsByIds(List<String> productIds) {
        return productRepository.findByProductIdIn(productIds)
                .stream()
                .map(this::mapToDto)
                .collect(Collectors.toList());
    }

    @Override
    public ProductDTO activateProduct(String productId) {
        log.info("Activating product: {}", productId);
        Product product = productRepository.findByProductId(productId)
                .orElseThrow(() -> new ProductNotFoundException("Product not found: " + productId));

        product.setIsActive(true);
        product.setUpdatedAt(LocalDateTime.now());

        Product savedProduct = productRepository.save(product);
        log.info("Product activated successfully: {}", productId);

        return mapToDto(savedProduct);
    }

    @Override
    public ProductDTO deactivateProduct(String productId) {
        log.info("Deactivating product: {}", productId);
        Product product = productRepository.findByProductId(productId)
                .orElseThrow(() -> new ProductNotFoundException("Product not found: " + productId));

        product.setIsActive(false);
        product.setUpdatedAt(LocalDateTime.now());

        Product savedProduct = productRepository.save(product);
        log.info("Product deactivated successfully: {}", productId);

        return mapToDto(savedProduct);
    }

    @Override
    public void deleteProduct(String productId) {
        log.info("Deleting product: {}", productId);
        Product product = productRepository.findByProductId(productId)
                .orElseThrow(() -> new ProductNotFoundException("Product not found: " + productId));

        productRepository.delete(product);
        log.info("Product deleted successfully: {}", productId);
    }

    @Override
    @Transactional(readOnly = true)
    public boolean existsByProductId(String productId) {
        return productRepository.existsByProductId(productId);
    }

    @Override
    @Transactional(readOnly = true)
    public boolean existsByTenantSku(String tenantSku) {
        return productRepository.existsByTenantSku(tenantSku);
    }

    @Override
    @Transactional(readOnly = true)
    public boolean existsBySupplierSku(String supplierSku) {
        return productRepository.existsBySupplierSku(supplierSku);
    }

    private void validateUniqueSkuCodes(ProductDTO productDto, Product existingProduct) {
        // Check SKU Code uniqueness
        if (existingProduct == null || !existingProduct.getProductId().equals(productDto.getProductId())) {
            if (productRepository.existsBySkuCode(productDto.getProductId())) {
                throw new ProductAlreadyExistsException("SKU Code already exists: " + productDto.getProductId());
            }
        }

        // Check Tenant SKU uniqueness
        if (existingProduct == null || !existingProduct.getTenantSku().equals(productDto.getTenantSku())) {
            if (productRepository.existsByTenantSku(productDto.getTenantSku())) {
                throw new ProductAlreadyExistsException("Tenant SKU already exists: " + productDto.getTenantSku());
            }
        }

        // Check Supplier SKU uniqueness
        if (existingProduct == null || !existingProduct.getSupplierSku().equals(productDto.getSupplierSku())) {
            if (productRepository.existsBySupplierSku(productDto.getSupplierSku())) {
                throw new ProductAlreadyExistsException("Supplier SKU already exists: " + productDto.getSupplierSku());
            }
        }

        // Check Product ID uniqueness (if provided)
        if (productDto.getProductId() != null) {
            if (existingProduct == null || !existingProduct.getProductId().equals(productDto.getProductId())) {
                if (productRepository.existsByProductId(productDto.getProductId())) {
                    throw new ProductAlreadyExistsException("Product ID already exists: " + productDto.getProductId());
                }
            }
        }
    }

    private Product mapToEntity(ProductDTO dto) {
        Product product = new Product();
        product.setProductId(dto.getProductId());
        product.setTenantSku(dto.getTenantSku());
        product.setSupplierSku(dto.getSupplierSku());
        product.setName(dto.getName());
        product.setCategory(dto.getCategory());
        product.setSubcategory(dto.getSubcategory());
        product.setUom(dto.getUom());

        product.setIsActive(dto.getIsActive() != null ? dto.getIsActive() : true);
        product.setCreatedBy(dto.getCreatedBy());
        product.setUpdatedBy(dto.getUpdatedBy());
        return product;
    }

    private ProductDTO mapToDto(Product entity) {
        ProductDTO dto = new ProductDTO();
        dto.setId(entity.getId());
        dto.setProductId(entity.getProductId());
        dto.setTenantSku(entity.getTenantSku());
        dto.setSupplierSku(entity.getSupplierSku());
        dto.setName(entity.getName());
        dto.setCategory(entity.getCategory());
        dto.setSubcategory(entity.getSubcategory());
        dto.setUom(entity.getUom());

        dto.setIsActive(entity.getIsActive());
        dto.setCreatedAt(entity.getCreatedAt());
        dto.setUpdatedAt(entity.getUpdatedAt());
        dto.setCreatedBy(entity.getCreatedBy());
        dto.setUpdatedBy(entity.getUpdatedBy());
        return dto;
    }

    private void updateEntityFromDto(Product entity, ProductDTO dto) {
        entity.setProductId(dto.getProductId());
        entity.setTenantSku(dto.getTenantSku());
        entity.setSupplierSku(dto.getSupplierSku());
        entity.setName(dto.getName());
        entity.setCategory(dto.getCategory());
        entity.setSubcategory(dto.getSubcategory());
        entity.setUom(dto.getUom());

        if (dto.getIsActive() != null) {
            entity.setIsActive(dto.getIsActive());
        }
        entity.setUpdatedBy(dto.getUpdatedBy());
    }
}
