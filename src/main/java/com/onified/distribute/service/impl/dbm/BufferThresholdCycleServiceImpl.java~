package com.onified.distribute.service.impl.dbm;

import com.onified.distribute.dto.*;
import com.onified.distribute.dto.response.BufferOverriddenResponse;
import com.onified.distribute.entity.*;
import com.onified.distribute.repository.*;
import com.onified.distribute.service.dbm.BufferThresholdCycleService;
import com.onified.distribute.service.dbm.BufferAdjustmentLogService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

@Slf4j
@Service
@RequiredArgsConstructor
@Transactional
public class BufferThresholdCycleServiceImpl implements BufferThresholdCycleService {

    private final InventoryBufferRepository inventoryBufferRepository;
    private final ReviewCycleRepository reviewCycleRepository;
    private final ProductRepository productRepository;
    private final LocationRepository locationRepository;
    private final BufferAdjustmentLogService bufferAdjustmentLogService;


    @Override
    @Transactional(readOnly = true)
    public Page<BufferOverriddenResponse> getAllManualBufferAdjustmentLogs(String productId, String locationId, Pageable pageable) {
        log.info("Fetching manual buffer adjustment logs with filters - productId: {}, locationId: {}", productId, locationId);

        try {
            // Get all manual override logs from BufferAdjustmentLogService
            Page<BufferAdjustmentLog> logs = bufferAdjustmentLogService
                    .getManualOverrideLogs(productId, locationId, pageable);

            List<BufferOverriddenResponse> responseList = logs.getContent().stream()
                    .map(this::convertToBufferOverriddenResponse)
                    .collect(Collectors.toList());

            return new PageImpl<>(responseList, pageable, logs.getTotalElements());

        } catch (Exception e) {
            log.error("Error fetching manual buffer adjustment logs", e);
            throw new RuntimeException("Failed to fetch manual buffer adjustment logs", e);
        }
    }

    @Override
    @Transactional(readOnly = true)
    public Page<BufferThresholdCycleDTO> getBufferThresholdCycles(String productId, String locationId, Pageable pageable) {
        log.info("Fetching buffer threshold cycles with filters - productId: {}, locationId: {}", productId, locationId);

        Page<InventoryBuffer> buffers;

        if (productId != null && locationId != null) {
            buffers = inventoryBufferRepository.findByProductIdAndLocationId(productId, locationId, pageable);
        } else if (productId != null) {
            buffers = inventoryBufferRepository.findByProductId(productId, pageable);
        } else if (locationId != null) {
            buffers = inventoryBufferRepository.findByLocationId(locationId, pageable);
        } else {
            buffers = inventoryBufferRepository.findAll(pageable);
        }

        List<BufferThresholdCycleDTO> dtoList = buffers.getContent().stream()
                .map(this::convertToBufferThresholdCycleDTO)
                .collect(Collectors.toList());

        return new PageImpl<>(dtoList, pageable, buffers.getTotalElements());
    }

    @Override
    @Transactional(readOnly = true)
    public BufferThresholdCycleDTO getBufferThresholdCycleById(String bufferId) {
        log.info("Fetching buffer threshold cycle by ID: {}", bufferId);

        InventoryBuffer buffer = inventoryBufferRepository.findById(bufferId)
                .orElseThrow(() -> new IllegalArgumentException("Buffer not found with ID: " + bufferId));

        return convertToBufferThresholdCycleDTO(buffer);
    }

    @Override
    public BufferThresholdCycleDTO updateBufferThresholdCycle(String bufferId, BufferThresholdUpdateDTO updateDTO) {
        log.info("Updating buffer threshold cycle for buffer ID: {}", bufferId);

        InventoryBuffer existingBuffer = inventoryBufferRepository.findById(bufferId)
                .orElseThrow(() -> new IllegalArgumentException("Buffer not found with ID: " + bufferId));

        // Store original values for change tracking
        Double originalRedThreshold = existingBuffer.getRedThresholdPct();
        Double originalYellowThreshold = existingBuffer.getYellowThresholdPct();
        String originalReviewCycleId = existingBuffer.getReviewCycleId();
        Integer originalReviewPeriodDays = existingBuffer.getDbmReviewPeriodDays();

        // Update the buffer with new values
        boolean hasChanges = updateBufferFields(existingBuffer, updateDTO);

        if (hasChanges) {
            existingBuffer.setUpdatedAt(LocalDateTime.now());
            existingBuffer.setUpdatedBy(updateDTO.getUpdatedBy());

            // Save the updated buffer
            InventoryBuffer savedBuffer = inventoryBufferRepository.save(existingBuffer);

            // Log the changes
            logBufferChanges(savedBuffer, originalRedThreshold, originalYellowThreshold,
                    originalReviewCycleId, originalReviewPeriodDays, updateDTO);

            log.info("Successfully updated buffer threshold cycle for buffer ID: {}", bufferId);
            return convertToBufferThresholdCycleDTO(savedBuffer);
        } else {
            log.info("No changes detected for buffer ID: {}", bufferId);
            return convertToBufferThresholdCycleDTO(existingBuffer);
        }
    }

    @Override
    public void triggerBufferReview(String bufferId) {
        log.info("Triggering manual review for buffer: {}", bufferId);

        InventoryBuffer buffer = inventoryBufferRepository.findByBufferId(bufferId);
        if (buffer == null) {
            throw new IllegalArgumentException("Buffer not found with ID: " + bufferId);
        }


        try {
            // Update the buffer's last review date and next review due date
            LocalDateTime now = LocalDateTime.now();
            buffer.setLastReviewDate(now);

            // Calculate next review due date based on review cycle or default period
            LocalDateTime nextReviewDue = calculateNextReviewDue(buffer, now);
            buffer.setNextReviewDue(nextReviewDue);

            // Update the buffer status to indicate review is in progress or completed
            buffer.setUpdatedAt(now);
            buffer.setUpdatedBy("SYSTEM_MANUAL_TRIGGER");

            // Save the updated buffer
            InventoryBuffer savedBuffer = inventoryBufferRepository.save(buffer);

            // Create an adjustment log entry for the manual review trigger
            createManualReviewLog(savedBuffer);

            // Optionally trigger any automated calculations or notifications
            performReviewCalculations(savedBuffer);

            log.info("Successfully triggered manual review for buffer: {}", bufferId);

        } catch (Exception e) {
            log.error("Failed to trigger manual review for buffer: {}", bufferId, e);
            throw new RuntimeException("Failed to trigger buffer review: " + e.getMessage(), e);
        }
    }

    private LocalDateTime calculateNextReviewDue(InventoryBuffer buffer, LocalDateTime fromDate) {
        if (buffer.getReviewCycleId() != null) {
            try {
                Optional<ReviewCycle> reviewCycleOpt = reviewCycleRepository.findByCycleId(buffer.getReviewCycleId());
                if (reviewCycleOpt.isPresent()) {
                    ReviewCycle cycle = reviewCycleOpt.get();
                    return calculateNextReviewDateFromCycle(cycle, fromDate);
                }
            } catch (Exception e) {
                log.warn("Could not calculate next review date from cycle for buffer: {}", buffer.getBufferId(), e);
            }
        }

        // Fallback to review period days or default
        Integer reviewPeriodDays = buffer.getDbmReviewPeriodDays() != null ?
                buffer.getDbmReviewPeriodDays() : 30; // Default to 30 days
        return fromDate.plusDays(reviewPeriodDays);
    }

    private LocalDateTime calculateNextReviewDateFromCycle(ReviewCycle cycle, LocalDateTime fromDate) {
        if (cycle.getFrequency() == null) {
            return fromDate.plusDays(30); // Default fallback
        }

        switch (cycle.getFrequency().toUpperCase()) {
            case "DAILY":
                return fromDate.plusDays(1);
            case "WEEKLY":
                return fromDate.plusWeeks(1);
            case "MONTHLY":
                return fromDate.plusMonths(1);
            case "QUARTERLY":
                return fromDate.plusMonths(3);
            default:
                // Use start day as number of days
                Integer days = cycle.getStartDay() != null ? cycle.getStartDay() : 30;
                return fromDate.plusDays(days);
        }
    }

    private void createManualReviewLog(InventoryBuffer buffer) {
        try {
            BufferAdjustmentLogDTO logDTO = BufferAdjustmentLogDTO.builder()
                    .logId(UUID.randomUUID().toString())
                    .bufferId(buffer.getBufferId())
                    .productId(buffer.getProductId())
                    .locationId(buffer.getLocationId())
                    .adjustmentType("MANUAL_REVIEW_TRIGGER")
                    .proposedBufferUnits(buffer.getBufferUnits())
                    .safetyBufferUnits(buffer.getBufferUnits())
                    .finalBufferUnits(buffer.getBufferUnits())
                    .changePercentage(0.0) // No actual change in buffer units
                    .triggerReason("Manual review triggered by user")
                    .systemRecommended(false)
                    .requiresApproval(false)
                    .approvalStatus("APPROVED")
                    .approvedBy("SYSTEM_MANUAL_TRIGGER")
                    .approvalDate(LocalDateTime.now())
                    .adjustmentDate(LocalDateTime.now())
                    .createdBy("SYSTEM_MANUAL_TRIGGER")
                    .comments(String.format("Manual review triggered for buffer %s. Last review: %s, Next review due: %s",
                            buffer.getBufferId(),
                            buffer.getLastReviewDate() != null ? buffer.getLastReviewDate().toString() : "Never",
                            buffer.getNextReviewDue() != null ? buffer.getNextReviewDue().toString() : "Not set"))
                    .build();

            bufferAdjustmentLogService.createBufferAdjustmentLog(logDTO);
            log.info("Created manual review trigger log for buffer: {}", buffer.getBufferId());

        } catch (Exception e) {
            log.error("Failed to create manual review trigger log for buffer: {}", buffer.getBufferId(), e);
            // Don't throw exception here as the main review trigger should still succeed
        }
    }

    private void performReviewCalculations(InventoryBuffer buffer) {
        try {
            // This method can be extended to perform actual buffer calculations
            // For now, we'll just log that the review was triggered

            log.info("Performing review calculations for buffer: {}", buffer.getBufferId());

            // Example: You could trigger recalculation of optimal buffer levels here
            // calculateOptimalBufferLevels(buffer);

            // Example: You could trigger demand forecast updates here
            // updateDemandForecast(buffer);

            // Example: You could trigger zone status updates here
            // updateBufferZoneStatus(buffer);

            log.info("Review calculations completed for buffer: {}", buffer.getBufferId());

        } catch (Exception e) {
            log.error("Error performing review calculations for buffer: {}", buffer.getBufferId(), e);
            // Don't throw exception here as it's supplementary to the main review trigger
        }
    }

    // Optional: Method to update buffer zone status based on current inventory levels
    private void updateBufferZoneStatus(InventoryBuffer buffer) {
        try {
            // This would typically involve checking current inventory levels against thresholds
            // and updating the currentZone field accordingly

            // Placeholder logic - you would implement actual zone calculation based on:
            // - Current inventory levels
            // - Red and yellow threshold percentages
            // - Buffer units

            String currentZone = calculateCurrentZone(buffer);
            if (!currentZone.equals(buffer.getCurrentZone())) {
                buffer.setCurrentZone(currentZone);
                inventoryBufferRepository.save(buffer);
                log.info("Updated zone status for buffer {} to: {}", buffer.getBufferId(), currentZone);
            }

        } catch (Exception e) {
            log.error("Error updating zone status for buffer: {}", buffer.getBufferId(), e);
        }
    }

    private String calculateCurrentZone(InventoryBuffer buffer) {
        // Placeholder implementation - replace with actual logic
        // This would typically involve:
        // 1. Getting current inventory levels from inventory service
        // 2. Calculating percentage of buffer used
        // 3. Comparing against red/yellow thresholds
        // 4. Returning appropriate zone (RED, YELLOW, GREEN)

        return buffer.getCurrentZone() != null ? buffer.getCurrentZone() : "GREEN";
    }


    @Override
    @Transactional(readOnly = true)
    public List<ReviewCycleDTO> getAvailableReviewCycles() {
        log.info("Fetching available review cycles");

        List<ReviewCycle> activeCycles = reviewCycleRepository.findByIsActiveTrue();
        return activeCycles.stream()
                .map(this::convertToReviewCycleDTO)
                .collect(Collectors.toList());
    }

    private boolean updateBufferFields(InventoryBuffer buffer, BufferThresholdUpdateDTO updateDTO) {
        boolean hasChanges = false;

        if (updateDTO.getRedThresholdPct() != null &&
                !updateDTO.getRedThresholdPct().equals(buffer.getRedThresholdPct())) {
            buffer.setRedThresholdPct(updateDTO.getRedThresholdPct());
            hasChanges = true;
        }

        if (updateDTO.getYellowThresholdPct() != null &&
                !updateDTO.getYellowThresholdPct().equals(buffer.getYellowThresholdPct())) {
            buffer.setYellowThresholdPct(updateDTO.getYellowThresholdPct());
            hasChanges = true;
        }

        if (updateDTO.getReviewCycleId() != null &&
                !updateDTO.getReviewCycleId().equals(buffer.getReviewCycleId())) {

            // Validate the review cycle exists
            ReviewCycle reviewCycle = reviewCycleRepository.findByCycleId(updateDTO.getReviewCycleId())
                    .orElseThrow(() -> new IllegalArgumentException("Review cycle not found: " + updateDTO.getReviewCycleId()));

            buffer.setReviewCycleId(updateDTO.getReviewCycleId());

            // Update review period days based on the cycle
            Integer calculatedPeriodDays = Math.abs(reviewCycle.getStartDay() - reviewCycle.getEndDay());
            buffer.setDbmReviewPeriodDays(calculatedPeriodDays);

            // Update next review due date
            buffer.setNextReviewDue(LocalDateTime.now().plusDays(calculatedPeriodDays));

            hasChanges = true;
        }

        if (updateDTO.getDbmReviewPeriodDays() != null &&
                !updateDTO.getDbmReviewPeriodDays().equals(buffer.getDbmReviewPeriodDays())) {
            buffer.setDbmReviewPeriodDays(updateDTO.getDbmReviewPeriodDays());
            buffer.setNextReviewDue(LocalDateTime.now().plusDays(updateDTO.getDbmReviewPeriodDays()));
            hasChanges = true;
        }

        return hasChanges;
    }

    private void logBufferChanges(InventoryBuffer buffer, Double originalRedThreshold,
                                  Double originalYellowThreshold, String originalReviewCycleId,
                                  Integer originalReviewPeriodDays, BufferThresholdUpdateDTO updateDTO) {

        StringBuilder changeDescription = new StringBuilder();
        double changePercentage = 0.0;

        if (updateDTO.getRedThresholdPct() != null && !updateDTO.getRedThresholdPct().equals(originalRedThreshold)) {
            changeDescription.append(String.format("Red threshold changed from %.2f%% to %.2f%%. ",
                    originalRedThreshold, updateDTO.getRedThresholdPct()));
            changePercentage = Math.abs(updateDTO.getRedThresholdPct() - originalRedThreshold);
        }

        if (updateDTO.getYellowThresholdPct() != null && !updateDTO.getYellowThresholdPct().equals(originalYellowThreshold)) {
            changeDescription.append(String.format("Yellow threshold changed from %.2f%% to %.2f%%. ",
                    originalYellowThreshold, updateDTO.getYellowThresholdPct()));
            changePercentage = Math.max(changePercentage, Math.abs(updateDTO.getYellowThresholdPct() - originalYellowThreshold));
        }

        if (updateDTO.getReviewCycleId() != null && !updateDTO.getReviewCycleId().equals(originalReviewCycleId)) {
            changeDescription.append(String.format("Review cycle changed from %s to %s. ",
                    originalReviewCycleId, updateDTO.getReviewCycleId()));
        }

        if (changeDescription.length() > 0) {
            try {
                BufferAdjustmentLogDTO logDTO = BufferAdjustmentLogDTO.builder()
                        .logId(UUID.randomUUID().toString())
                        .bufferId(buffer.getBufferId())
                        .productId(buffer.getProductId())
                        .locationId(buffer.getLocationId())
                        .adjustmentType("THRESHOLD_UPDATE")
                        .proposedBufferUnits(buffer.getBufferUnits())
                        .safetyBufferUnits(buffer.getBufferUnits())
                        .finalBufferUnits(buffer.getBufferUnits())
                        .changePercentage(changePercentage)
                        .triggerReason("Manual threshold/cycle update")
                        .systemRecommended(false)
                        .requiresApproval(false)
                        .approvalStatus("APPROVED")
                        .approvedBy(updateDTO.getUpdatedBy())
                        .approvalDate(LocalDateTime.now())
                        .adjustmentDate(LocalDateTime.now())
                        .createdBy(updateDTO.getUpdatedBy())

                        .comments(changeDescription.toString().trim())
                        .build();

                bufferAdjustmentLogService.createBufferAdjustmentLog(logDTO);
                log.info("Created adjustment log for buffer threshold changes: {}", buffer.getBufferId());
            } catch (Exception e) {
                log.error("Failed to create adjustment log for buffer: {}", buffer.getBufferId(), e);
            }
        }
    }

    private BufferThresholdCycleDTO convertToBufferThresholdCycleDTO(InventoryBuffer buffer) {
        BufferThresholdCycleDTO.BufferThresholdCycleDTOBuilder builder = BufferThresholdCycleDTO.builder()
                .bufferId(buffer.getBufferId())
                .productId(buffer.getProductId())
                .locationId(buffer.getLocationId())
                .redThresholdPct(buffer.getRedThresholdPct())
                .yellowThresholdPct(buffer.getYellowThresholdPct())
                .reviewCycleId(buffer.getReviewCycleId())
                .dbmReviewPeriodDays(buffer.getDbmReviewPeriodDays())
                .lastReviewDate(buffer.getLastReviewDate())
                .nextReviewDue(buffer.getNextReviewDue())
                .currentZone(buffer.getCurrentZone())
                .isActive(buffer.getIsActive());

        // Get product information for type and type_name
        try {
            Optional<Product> product = productRepository.findByProductId(buffer.getProductId());
            if (product.isPresent()) {
                builder.type("SKU")
                        .typeName(product.get().getName() != null ? product.get().getName() : product.get().getProductId());
            } else {
                builder.type("SKU")
                        .typeName(buffer.getProductId());
            }
        } catch (Exception e) {
            log.warn("Could not fetch product details for productId: {}", buffer.getProductId());
            builder.type("SKU").typeName(buffer.getProductId());
        }

        // Get review cycle information
        if (buffer.getReviewCycleId() != null) {
            try {
                Optional<ReviewCycle> reviewCycle = reviewCycleRepository.findByCycleId(buffer.getReviewCycleId());
                if (reviewCycle.isPresent()) {
                    ReviewCycle cycle = reviewCycle.get();
                    builder.reviewCycleName(cycle.getCycleName())
                            .reviewAutomation(cycle.getAutoCalculateNext() != null && cycle.getAutoCalculateNext() ? "System" : "Manual");

                    // Format review date based on frequency
                    String reviewDate = formatReviewDate(cycle);
                    builder.reviewDate(reviewDate);
                } else {
                    builder.reviewCycleName("Unknown Cycle")
                            .reviewAutomation("Manual")
                            .reviewDate("Not configured");
                }
            } catch (Exception e) {
                log.warn("Could not fetch review cycle details for cycleId: {}", buffer.getReviewCycleId());
                builder.reviewCycleName("Unknown Cycle")
                        .reviewAutomation("Manual")
                        .reviewDate("Not configured");
            }
        } else {
            builder.reviewCycleName("No Cycle Assigned")
                    .reviewAutomation("Manual")
                    .reviewDate("Not configured");
        }

        // Calculate change trigger percentage from recent adjustment logs
        try {
            Double changeTriggerPct = calculateChangeTriggerPercentage(buffer.getBufferId());
            builder.changeTriggerPct(changeTriggerPct);
        } catch (Exception e) {
            log.warn("Could not calculate change trigger percentage for buffer: {}", buffer.getBufferId());
            builder.changeTriggerPct(0.0);
        }

        return builder.build();
    }

    private String formatReviewDate(ReviewCycle cycle) {
        if (cycle.getFrequency() == null) {
            return "Not configured";
        }

        switch (cycle.getFrequency().toUpperCase()) {
            case "MONTHLY":
                return String.format("%s of every month", getOrdinalNumber(cycle.getStartDay()));
            case "WEEKLY":
                return String.format("Every %s", getDayOfWeek(cycle.getStartDay()));
            case "QUARTERLY":
                return String.format("%s of every quarter", getOrdinalNumber(cycle.getStartDay()));
            case "DAILY":
                return "Daily";
            default:
                return String.format("Every %d days", cycle.getStartDay());
        }
    }

    private String getOrdinalNumber(Integer day) {
        if (day == null) {
            return "1st";
        }

        if (day >= 11 && day <= 13) {
            return day + "th";
        }

        switch (day % 10) {
            case 1: return day + "st";
            case 2: return day + "nd";
            case 3: return day + "rd";
            default: return day + "th";
        }
    }

    private String getDayOfWeek(Integer dayNumber) {
        if (dayNumber == null) {
            return "Monday";
        }

        String[] days = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
        int index = dayNumber % 7;
        return days[index];
    }

    private Double calculateChangeTriggerPercentage(String bufferId) {
        // This would typically query the BufferAdjustmentLog to find recent changes
        // For now, returning a default value - you can implement the actual logic
        // based on your BufferAdjustmentLogService
        try {
            // Example: Get the most recent adjustment log entry
            // and return its change percentage
            return 0.0; // Placeholder - implement based on your adjustment log service
        } catch (Exception e) {
            log.warn("Error calculating change trigger percentage for buffer: {}", bufferId, e);
            return 0.0;
        }
    }

    private ReviewCycleDTO convertToReviewCycleDTO(ReviewCycle reviewCycle) {
        return ReviewCycleDTO.builder()
                .id(reviewCycle.getId())
                .cycleId(reviewCycle.getCycleId())
                .cycleName(reviewCycle.getCycleName())
                .description(reviewCycle.getDescription())
                .frequency(reviewCycle.getFrequency())
                .startDay(reviewCycle.getStartDay())
                .endDay(reviewCycle.getEndDay())
                .autoCalculateNext(reviewCycle.getAutoCalculateNext())
                .isActive(reviewCycle.getIsActive())
                .build();
    }
}
